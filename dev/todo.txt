test_nu2nu/u2nu/nu2u/nufft1/nufft2
    (test_value_apply, test_math_adjoint) use a fixed eps threshold of 1e-3 for all comparisons.
    This should be changed to vary with kernel stopband energy.
nu2nu / nu2u / u2nu / nufft1 / nufft2
    The transforms have difficulty when ALL computations are performed in FP32: accuracy suffers greatly.
    In contrast FP64 computations match expected accuracy targets well.
    Something in the processing pipeline in FP32 mode is very sensitive to numerical errors.
    This effect is more pronounced in nu2u / u2nu where fast uniform-spread/interp is performed via FFTs.
    To be investigated.
nu2u (u2nu as by-product)
    fw_interpolate() and bw_spread() are speed-wise on-par with NU2NU's same-named functions since the np.ndindex() loops are done sequentially.
    [We actually see that each iterate does not saturate the CPU the same way NU2NU's methods do.]
    Memory consumption is lower however due to materializing L-sized arrays instead of N-sized.
    Consider explicit parallel evaluation of each iterate if Ov is large.
